services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: chatgpt
      POSTGRES_PASSWORD: chatgpt123
      POSTGRES_DB: chatgpt_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatgpt"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      PORT: 8080
      POSTGRES_URL: postgresql://chatgpt:chatgpt123@postgres:5432/chatgpt_db?sslmode=disable
      REDIS_URL: redis://redis:6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Chat Service
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    environment:
      PORT: 8081
      POSTGRES_URL: postgresql://chatgpt:chatgpt123@postgres:5432/chatgpt_db?sslmode=disable
      REDIS_URL: redis://redis:6379
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      PORT: 8082
      REDIS_URL: redis://redis:6379
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy

  # Web Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8081/ws
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - chat-service
      - auth-service

volumes:
  postgres_data:
  redis_data: 