# Docker Compose for ShopMindAI - ChatGPT Clone

services:
  # NGINX Load Balancer (entry point)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - traefik
    networks:
      - chatgpt-network

  # PostgreSQL with Citus for sharding
  postgres:
    image: citusdata/citus:12.1
    environment:
      POSTGRES_USER: chatgpt
      POSTGRES_PASSWORD: chatgpt123
      POSTGRES_DB: chatgpt_db
      CITUS_DB_NAME: chatgpt_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - chatgpt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatgpt"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - chatgpt-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka for event-driven architecture
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - chatgpt-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - chatgpt-network

  # Keycloak for authentication
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.3
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: chatgpt
      KC_DB_PASSWORD: chatgpt123
      KC_HEALTH_ENABLED: true
    command: start-dev
    ports:
      - "8180:8080"
    networks:
      - chatgpt-network
    depends_on:
      postgres:
        condition: service_healthy

  # Consul for service discovery
  consul:
    image: hashicorp/consul:latest
    command: agent -server -bootstrap-expect=1 -node=consul-1 -client=0.0.0.0 -ui
    ports:
      - "8500:8500"
    volumes:
      - consul_data:/consul/data
    networks:
      - chatgpt-network

  # User Service (Go)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      POSTGRES_URL: postgresql://chatgpt:chatgpt123@postgres:5432/chatgpt_db?sslmode=disable
      REDIS_URL: redis://redis:6379
      CONSUL_URL: http://consul:8500
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: chatgpt
      KEYCLOAK_CLIENT_ID: chatgpt-backend
      KEYCLOAK_CLIENT_SECRET: secret123
    ports:
      - "8080:8080"
    networks:
      - chatgpt-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    volumes:
      - ./services/user-service:/app
    command: air -c .air.toml

  # Chat Service (Go)
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    environment:
      POSTGRES_URL: postgresql://chatgpt:chatgpt123@postgres:5432/chatgpt_db?sslmode=disable
      REDIS_URL: redis://redis:6379
      KAFKA_BROKERS: kafka:9092
      CONSUL_URL: http://consul:8500
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: chatgpt
      KEYCLOAK_CLIENT_ID: chatgpt-backend
      KEYCLOAK_CLIENT_SECRET: secret123
    ports:
      - "8081:8081"
    networks:
      - chatgpt-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      consul:
        condition: service_started
    volumes:
      - ./services/chat-service:/app
    command: air -c .air.toml

  # Auth Service (Go)
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: chatgpt
      KEYCLOAK_CLIENT_ID: chatgpt-backend
      KEYCLOAK_CLIENT_SECRET: secret123
      REDIS_URL: redis://redis:6379
      CONSUL_URL: http://consul:8500
    ports:
      - "8082:8082"
    networks:
      - chatgpt-network
    depends_on:
      keycloak:
        condition: service_started
      redis:
        condition: service_healthy
      consul:
        condition: service_started
    volumes:
      - ./services/auth-service:/app
    command: air -c .air.toml

  # Web Frontend (Next.js)
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8081/ws
      NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8180
      NEXT_PUBLIC_KEYCLOAK_REALM: chatgpt
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: chatgpt-frontend
    ports:
      - "3000:3000"
    networks:
      - chatgpt-network
    depends_on:
      - user-service
      - chat-service
      - auth-service
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Traefik API Gateway
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--providers.consul.endpoints=consul:8500"
    ports:
      - "8000:80"     # Main API gateway
      - "8090:8080"   # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - chatgpt-network
    depends_on:
      - consul
    labels:
      - "traefik.enable=true"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    volumes:
      - ./infrastructure/docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - chatgpt-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.3
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - chatgpt-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  consul_data:
  prometheus_data:
  grafana_data:

networks:
  chatgpt-network:
    driver: bridge