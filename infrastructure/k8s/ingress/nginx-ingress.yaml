apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: shopmindai
data:
  nginx.conf: |
    # NGINX configuration for billions of requests
    worker_processes auto;
    worker_rlimit_nofile 65535;
    
    events {
        worker_connections 65535;
        use epoll;
        multi_accept on;
    }
    
    http {
        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        keepalive_requests 10000;
        types_hash_max_size 2048;
        server_tokens off;
        
        # Buffer sizes
        client_body_buffer_size 16K;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 16k;
        client_max_body_size 8m;
        
        # Timeouts
        client_body_timeout 12;
        client_header_timeout 12;
        send_timeout 10;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/xhtml+xml application/x-font-ttf application/x-font-opentype application/vnd.ms-fontobject image/svg+xml;
        gzip_disable "msie6";
        
        # Rate limiting zones
        limit_req_zone $binary_remote_addr zone=api_limit:100m rate=100r/s;
        limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;
        limit_conn_zone $binary_remote_addr zone=conn_limit:100m;
        
        # Cache paths
        proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:100m max_size=10g inactive=60m use_temp_path=off;
        proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:50m max_size=5g inactive=24h use_temp_path=off;
        
        # Upstream health checks
        upstream chat_backend {
            least_conn;
            keepalive 300;
            
            server chat-service:8001 max_fails=3 fail_timeout=30s;
        }
        
        upstream user_backend {
            least_conn;
            keepalive 300;
            
            server user-service:8000 max_fails=3 fail_timeout=30s;
        }
        
        upstream auth_backend {
            least_conn;
            keepalive 100;
            
            server auth-service:8000 max_fails=3 fail_timeout=30s;
        }
        
        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
        
        # Main server block
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name _;
            
            # Redirect to HTTPS
            return 301 https://$host$request_uri;
        }
        
        server {
            listen 443 ssl http2 default_server;
            listen [::]:443 ssl http2 default_server;
            server_name shopmindai.io;
            
            ssl_certificate /etc/nginx/ssl/tls.crt;
            ssl_certificate_key /etc/nginx/ssl/tls.key;
            
            # API endpoints with rate limiting
            location /api/chat {
                limit_req zone=api_limit burst=200 nodelay;
                limit_conn conn_limit 100;
                
                proxy_pass http://chat_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Caching for GET requests
                proxy_cache api_cache;
                proxy_cache_valid 200 1m;
                proxy_cache_key "$scheme$request_method$host$request_uri";
                proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
                proxy_cache_background_update on;
                proxy_cache_lock on;
                
                # Timeouts
                proxy_connect_timeout 5s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
            }
            
            location /api/auth {
                limit_req zone=auth_limit burst=20 nodelay;
                
                proxy_pass http://auth_backend;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /api/users {
                limit_req zone=api_limit burst=100 nodelay;
                
                proxy_pass http://user_backend;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Cache user profiles
                proxy_cache api_cache;
                proxy_cache_valid 200 5m;
            }
            
            # WebSocket support
            location /ws {
                proxy_pass http://chat_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # WebSocket timeouts
                proxy_connect_timeout 7d;
                proxy_send_timeout 7d;
                proxy_read_timeout 7d;
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Metrics endpoint (internal only)
            location /metrics {
                allow 10.0.0.0/8;
                deny all;
                proxy_pass http://localhost:9113/metrics;
            }
        }
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ingress
  namespace: shopmindai
spec:
  selector:
    matchLabels:
      app: nginx-ingress
  template:
    metadata:
      labels:
        app: nginx-ingress
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        - name: https
          containerPort: 443
          hostPort: 443
        resources:
          requests:
            cpu: 1
            memory: 1Gi
          limits:
            cpu: 4
            memory: 4Gi
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
        - name: cache
          mountPath: /var/cache/nginx
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11
        args:
        - -nginx.scrape-uri=http://localhost/nginx_status
        ports:
        - name: metrics
          containerPort: 9113
        resources:
          requests:
            cpu: 50m
            memory: 50Mi
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certs
        secret:
          secretName: tls-secret
      - name: cache
        emptyDir:
          sizeLimit: 20Gi
      nodeSelector:
        node-role.kubernetes.io/edge: "true"
      tolerations:
      - key: node-role.kubernetes.io/edge
        operator: Equal
        value: "true"
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress
  namespace: shopmindai
  annotations:
    # For cloud providers
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  selector:
    app: nginx-ingress